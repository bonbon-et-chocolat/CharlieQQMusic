#!/usr/bin/env node

/**
 * Module dependencies.
 */

'use strict';
let app = require( '../app' );
let debug = require( 'debug' )( 'qqmusicapi:server' );
let http = require( 'http' );
let config = require( './config' );
const cron = require( 'node-cron' );
const Songs = require( '../controllers/Songs' );
const Ranks = require( '../controllers/Ranks' );
const Netease = require( '../controllers/Netease' );
const Kugou = require( '../controllers/Kugou' );
const Bili = require( '../controllers/Bili' );
const Bot = require( '../controllers/Bot' );
const db = require( '../util/db' );

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort( process.env.PORT || config.port );
global.PORT = port;
global.useDataStatistics = config.useDataStatistics;
app.set( 'port', port );

/**
 * Create HTTP server.
 */

let server = http.createServer( app );

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen( port );
server.on( 'error', onError );
server.on( 'listening', onListening );

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort( val ) {
    let port = parseInt( val, 10 );

    if( isNaN( port ) ) {
    // named pipe
        return val;
    }

    if( port >= 0 ) {
    // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError( error ) {
    if( error.syscall !== 'listen' ) {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch( error.code ) {
    case'EACCES':
        console.error( bind + ' requires elevated privileges' );
        process.exit( 1 );
        break;
    case'EADDRINUSE':
        console.error( bind + ' is already in use' );
        process.exit( 1 );
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug( 'Listening on ' + bind );
    console.log( `Listening on \n http://localhost:${addr.port} \n http://127.0.0.1:${addr.port}` );

    // ( async function(){
    //     global.client = await db.connect();
    // })();

    // // start cron job for fetching live data
    // cron.schedule( '1,20,40 0-23 * * *', async () => {
    //     Songs.updateReportData();
    //     Kugou.updateMeta();
    //     Kugou.updateHonors();
    // }, {
    //     timezone: 'Asia/Shanghai'
    // }).start();

    // // start cron job for fetching live data
    // cron.schedule( '0 0,8-14 * * *', async () => {
    //     Ranks.updateCharts();
    //     Netease.updateCharts();
    // }, {
    //     timezone: 'Asia/Shanghai'
    // }).start();

    // // start cron job for updating yesterday data
    // cron.schedule( '0 0 * * *', async () => {
    //     Songs.updateYesterdayPlaylist();
    //     Netease.updateYesterday();
    //     Songs.updateYesterday();
    //     Bili.updateYesterday();
    // }, {
    //     timezone: 'Asia/Shanghai'
    // }).start();

    // // start cron job for updating yesterday data
    // cron.schedule( '0 * * * *', async () => {
    //     Bot.ping();
    // }, {
    //     timezone: 'Asia/Shanghai'
    // }).start();
}
